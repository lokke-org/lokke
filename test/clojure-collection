#!./lokke -0  ;; -*-clojure-*-
!#

;;; Copyright (C) 2019 Ryan Senior <senior.ryan@gmail.com>
;;;
;;; This project is free software; you can redistribute it and/or
;;; modify it under the terms of (at your option) either of the
;;; following two licences:
;;;
;;;   1) The GNU Lesser General Public License as published by the
;;;      Free Software Foundation; either version 2.1, or (at your
;;;      option) any later version
;;;
;;;   2) The Eclipse Public License; either version 1.0 or (at your
;;;      option) any later version.

(ns test.clojure-collection
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(testing "rest behavior"
  (is (= '(2) (rest (list 1 2))))
  (is (= () (rest (list 1))))
  (is (= [2] (rest [1 2])))
  (is (= (list 2) (rest [1 2])))
  (is (= '(2) (rest [1 2])))
  (is (= [2] (rest (list 1 2))))
  (is (= (list 2) (rest (list 1 2))))
  (is (= '(2) (rest (list 1 2))))
  (is (empty? (rest [1])))
  (is (= (list) (rest [1])))
  (is (= () (rest [1]))))

(testing "empty list/vector tests"
  (is (= () ()))
  (is (= [] []))
  (is (= () []))
  (is (empty? ()))
  (is (empty? (seq ())))
  (is (empty? []))
  (is (empty? (seq [])))
  (is (not= () false))
  (is (not= '(1) true))
  (is (not= () nil))

  (is (not (empty? '(1))))
  (is (not (empty? [1]))))

(testing "vector tests"
  (is (not (= [1 2 3] #{4 5})))
  (is (not (= [1 2 3] (list 4 5))))
  (is (not (= [1 2 3] '(4 5)))))

(testing "seqable?"
  (is (= true (seqable? nil)))
  (is (= true (seqable? ())))
  (is (= true (seqable? [])))
  (is (= true (seqable? {})))
  (is (= true (seqable? #{})))
  (is (= true (seqable? (guile.guile/vector))))
  (is (= false (seqable? true)))
  (is (= false (seqable? false))))

(testing "full sequential equals"
  (is (not (= '(1 2 3) '(4 5 6))))
  (is (not (= (seq [1 2 3]) [4 5 6]))))

(testing "counted?"
  (is (not (counted? nil)))
  (is (counted? ()))
  ;; FIXME: These differ from clojure/jvm right now because '(...) is
  ;; actually just a guile pair.  Still have to decide if that's OK,
  ;; but this begins to suggest more strongly it might not be, i.e. we
  ;; may need a real persistent list sooner rather than later.
  (is (not (counted? '(1 2))))
  (is (not (counted? '(cons 1 (cons 2 nil))))))

(testing "count"
  (is (= 0 (count nil)))
  (is (= 0 (count ())))
  (is (= 0 (count [])))
  (is (= 0 (count {})))
  (is (= 0 (count #{})))
  (is (= 2 (count '(1 2))))
  (is (= 2 (count [1 2])))
  (is (= 1 (count {1 2})))
  (is (= 2 (count #{1 2})))
  (is (= 2 (count (seq [1 2]))))
  (is (= 2 (count (cons 1 [2])))))

(testing "bounded-count"
  (is (= 0 (bounded-count 0 ())))
  (is (= 0 (bounded-count 1 ())))
  (is (= 0 (bounded-count 0 '(1 2))))
  (is (= 1 (bounded-count 1 '(1 2))))
  (is (= 2 (bounded-count 2 '(1 2))))
  (is (= 2 (bounded-count 3 '(1 2))))

  (is (= 0 (bounded-count 0 [])))
  (is (= 0 (bounded-count 1 [])))
  (is (= 2 (bounded-count 0 [1 2])))
  (is (= 2 (bounded-count 1 [1 2])))
  (is (= 2 (bounded-count 2 [1 2])))
  (is (= 2 (bounded-count 3 [1 2]))))

(testing "reduce"
  (is (= 0 (reduce + [])))
  (is (= :fine (reduce (fn [] :crash) [:fine])))
  (is (= 3 (reduce + [1 2])))
  (is (= 6 (reduce + [1 2 3])))
  (is (= :default (reduce + :default [])))
  (is (= 6 (reduce + 1 [2 3]))))

(testing "reductions"
  (is (= [0] (reductions + [])))
  (is (= [:fine] (reductions (fn [] :crash) [:fine])))
  (is (= [1 3] (reductions + [1 2])))
  (is (= [1 3 6] (reductions + [1 2 3])))
  (is (= [:default] (reductions + :default [])))
  (is (= [1 3 6] (reductions + 1 [2 3]))))

(testing "filterv"
  (is (= [] (filterv identity ())))
  (is (= [1] (filterv identity '(1))))
  (is (= [1 3] (filterv odd? '(1 2 3 4)))))

(testing "mapv"
  (is (= [] (mapv identity ())))
  (is (= [1] (mapv identity '(1))))
  (is (= [2] (mapv inc '(1))))
  (is (= [2 3] (mapv inc '(1 2))))
  (is (= [4 6] (mapv + '(1 2) '(3 4)))))

(testing "map-indexed"
  (is (= [] (map-indexed #(do %&) ())))
  (is (= [[0 1]] (map-indexed #(do %&) '(1))))
  (is (= [[0 1] [1 2]] (map-indexed #(do %&) '(1 2)))))

(testing "get"
  (is (= nil (get {} 1)))
  (is (= :something (get {} 1 :something)))
  (is (= nil (get nil 1)))
  (is (= :something (get nil 1 :something)))
  (is (= 2 (get {1 2} 1)))
  (is (= nil (get {1 2} 3)))
  (is (= :something (get {1 2} 3 :something))))

(testing "take"
  (is (= [] (take 0 [])))
  (is (= [] (take 0 [1])))
  (is (= [1] (take 1 [1 2 3])))
  (is (= [1 2] (take 2 [1 2]))))

(testing "take-nth"
  (is (= [] (take-nth 1 [])))
  (is (= [1 2] (take-nth 1 [1 2])))
  (is (= [1 3] (take-nth 2 [1 2 3 4])))
  (is (= [1 3 5] (take-nth 2 [1 2 3 4 5]))))

(testing "take-while"
  (is (= [] (take-while even? [])))
  (is (= [] (take-while even? [1])))
  (is (= [2] (take-while even? [2 3 4])))
  (is (= [2 4] (take-while even? [2 4 7]))))

(testing "take-last []"
  (is (= nil (take-last 0 [])))
  (is (= nil (take-last 1 [])))
  (is (= nil (take-last 0 [1])))
  (is (= [3] (take-last 1 [1 2 3])))
  (is (= [2 3] (take-last 2 [1 2 3])))
  (is (= [1 2 3] (take-last 3 [1 2 3]))))

(testing "take-last ()"
  (is (= nil (take-last 0 '())))
  (is (= nil (take-last 1 '())))
  (is (= nil (take-last 0 '(1))))
  (is (= [3] (take-last 1 '(1 2 3))))
  (is (= [2 3] (take-last 2 '(1 2 3))))
  (is (= [1 2 3] (take-last 3 '(1 2 3)))))

(testing "drop"
  (is (= [] (drop 0 [])))
  (is (= [1] (drop 0 [1])))
  (is (= [2 3] (drop 1 [1 2 3]))))

(testing "drop-while"
  (is (= [] (drop-while even? [])))
  (is (= [] (drop-while even? [2])))
  (is (= [3 4] (drop-while even? [2 3 4])))
  (is (= [7] (drop-while even? [2 4 7]))))

(testing "drop-last"
  (is (= [] (drop-last 0 [])))
  (is (= [] (drop-last 1 [])))
  (is (= [] (drop-last 1 [1])))
  (is (= [1 2] (drop-last 1 [1 2 3])))
  (is (= [] (drop-last 3 [1 2 3])))
  (is (= [] (drop-last 4 [1 2 3]))))

(testing "split-with"
  (is (= [[] []] (split-with even? [])))
  (is (= [[] [1]] (split-with even? [1])))
  (is (= [[2] []] (split-with even? [2])))
  (is (= [[2 4] [7 9]] (split-with even? [2 4 7 9]))))

(testing "iterate"
  (is (= [0 1 2] (take 3 (iterate inc 0)))))

(testing "range"
  (is (= [0 1 2] (take 3 (range))))
  (is (= [0 1 2] (range 3)))
  (is (= [3 4 5 6 7 8] (range 3 9)))
  (is (= [0 5 10 15] (range 0 20 5))))

(testing "assoc"
  (is (= {:x 1} (assoc nil :x 1))))

(testing "assoc-in"
  (is (= {:x 1} (assoc-in {} [:x] 1)))
  (is (= {:x {:y 1}} (assoc-in {} [:x :y] 1)))
  (is (= {:w {:x :z}} (assoc-in {:w {:x {:y {:z 1}}}} [:w :x] :z))))

(testing "replace"
  (is (= nil (replace nil nil)))        ; jvmdiff: clojure/jvm returns ()
  (is (= nil (replace {} nil)))         ; jvmdiff: clojure/jvm returns ()
  (is (= [] (replace {} [])))
  (is (= true (vector? (replace {} [])))))

(testing "list*"
  (is (= nil (list* nil)))
  (is (= nil (list* [])))
  (is (= [1] (list* 1 nil)))
  (is (= [1] (list* 1 [])))
  (is (= [1 2 3] (take 3 (list* 1 2 (repeat 3))))))

(testing "peek"
  (is (= nil (peek nil)))
  (is (= nil (peek ())))
  (is (= nil (peek [])))
  (is (= 1 (peek '(1 2))))
  (is (= 2 (peek [1 2])))
  (is (= 3 (peek (subvec [1 2 3] 1)))))

(testing "pop"
  (is (= nil (pop nil)))
  ;; (pop ())   FIXME: test for exception
  ;; (is (= nil (pop [])))  FIXME: test for exception
  (is (= [2] (pop '(1 2))))
  (is (= [1] (pop [1 2])))
  (is (= [2] (pop (subvec [1 2 3] 1)))))

(testing "doseq"
  (is (= nil (doseq [x []])))

  (let [effects (atom [])]
    (doseq [x [(reset! effects [1])]])
    (is (= [1] @effects)))

  (let [effects (atom 0)]
    (doseq [x (range 3)]
      (swap! effects inc))
    (is (= 3 @effects)))

  (let [effects (atom [])]
    (doseq [x (range 10) :when (odd? x)]
      (swap! effects conj x))
    (is (= [1 3 5 7 9] @effects)))

  (let [effects (atom [])]
    (doseq [x (range 3) :let [y (* 2 x)]]
      (swap! effects conj [x y]))
    (is (= [[0 0] [1 2] [2 4]] @effects)))

  (let [effects (atom [])]
    (doseq [x (range 2)
            y (range 3)]
      (swap! effects conj [x y]))
    (is (= [[0 0] [0 1] [0 2]
            [1 0] [1 1] [1 2]]
           @effects)))

  (let [effects (atom [])]
    (doseq [x (range 10) :while (< x 4)] (swap! effects conj x))
    (is (= [0 1 2 3] @effects)))

  (let [effects (atom [])]
    (doseq [x (range 2) y (range 5) :while (< y 3)]
      (swap! effects conj [x y]))
    (is (= [[0 0] [0 1] [0 2]
            [1 0] [1 1] [1 2]]
           @effects)))

  (let [effects (atom [])]
    (doseq [x (range 2) y (range 5) :while (< y 3) :when (even? x)]
      (swap! effects conj [x y]))
    (is (= [[0 0] [0 1] [0 2]] @effects))))

(testing "for"
  (is (= () (for [x []] true)))
  (is (= [0 1 2] (for [x (range 3)] x)))
  (is (= [1 3 5 7 9] (for [x (range 10) :when (odd? x)] x)))
  (is (= [[0 0] [1 2] [2 4]] (for [x (range 3) :let [y (* 2 x)]] [x y])))
  (is (= [[0 0] [0 1] [0 2]
          [1 0] [1 1] [1 2]]
         (for [x (range 2) y (range 3)] [x y])))
  (is (= [0 1 2 3] (for [x (range 10) :while (< x 4)] x)))
  (is (= [[0 0] [0 1] [0 2]
          [1 0] [1 1] [1 2]]
         (for [x (range 2) y (range 5) :while (< y 3)] [x y])))
  (is (= [[0 0] [0 1] [0 2]]
         (for [x (range 2) y (range 5) :while (< y 3) :when (even? x)] [x y]))))

(testing "reverse"
  (is (= () (reverse ())))
  (is (= () (reverse [])))
  (is (= [1] (reverse [1])))
  (is (= [3 2 1] (reverse [1 2 3]))))

(testing "random-sample"
  (is (= [] (random-sample 0 [])))
  (is (= (range 5) (random-sample 1 (range 5))))
  (let [result (random-sample 0.5 (range 10))
        n (count result)]
    (is (>= n 0))
    (is (<= n 10))
    (is (every? (complement neg?) result))
    (is (every? #(< % 10) result))))

(testing "cycle"
  (is (= [] (cycle [])))
  (is (= [1 1 1] (take 3 (cycle [1]))))
  (is (= [1 2 3 1] (take 4 (cycle [1 2 3]))))
  (is (= [1 2 3 1 2 3 1] (take 7 (cycle [1 2 3])))))

(testing "shuffle"
  (is (= [] (shuffle [])))
  (is (= 5 (count (shuffle (range 5)))))
  (let [x (range 10)]
    (is (= (set x) (set (shuffle x))))))

(testing "interleave"
  (is (= []  (interleave)))
  (is (= []  (interleave [])))
  (is (= []  (interleave [] [1])))
  (is (= []  (interleave [1] [])))
  (is (= [1 :a]  (interleave [1] [:a])))
  (is (= [1 :a :x 2 :b :y 3 :c :z]  (interleave [1 2 3] [:a :b :c] [:x :y :z])))
  (is (= [1 :a :x 2 :b :y]  (interleave [1 2 3] [:a :b] [:x :y :z]))))

(testing "interpose"
  (is (= []  (interpose :or [])))
  (is (= [1]  (interpose :or [1])))
  (is (= [1 :or 2]  (interpose :or [1 2])))
  (is (= [1 :or 2 :or 3]  (interpose :or [1 2 3]))))

(testing "zipmap"
  (is (= {} (zipmap [] [])))
  (is (= {} (zipmap [:x] [])))
  (is (= {} (zipmap [] [1])))
  (is (= {:x 1} (zipmap [:x] [1])))
  (is (= {:x 1} (zipmap [:x :y] [1])))
  (is (= {:x 1 :y 2} (zipmap [:x :y] [1 2]))))

(testing "some"
  (is (= 3 (some identity [nil nil false 3 4 5])))
  (is (= 1 (some identity [1 2 3 4 5])))
  (is (= nil (some identity [nil false nil])))
  (is (= nil (some identity []))))

(testing "repeat"
  (is (= [1 1 1] (take 3 (repeat 1))))
  (is (= [1 1 1] (repeat 3 1)))
  (is (= [] (repeat 0 1)))
  (is (= [nil nil nil] (repeat 3 nil))))

(testing "repeatedly"
  (is (= [1 1 1] (take 3 (repeatedly (fn [] 1)))))
  (is (= [1 1 1] (take 3 (drop 100 (repeatedly (fn [] 1))))))
  (is (= [1 1 1] (repeatedly 3 (fn [] 1))))
  (is (= [] (repeatedly 0 (fn [] 1)))))

(end-tests (ns-name *ns*) :exit? true)
